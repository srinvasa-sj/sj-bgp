rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
             && request.resource.size < 5 * 1024 * 1024; // 5MB max
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImage();
    }

    // Product images
    match /products/{productId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin() && isValidImage();
    }

    // Category images
    match /categories/{categoryId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin() && isValidImage();
    }

    // Promotion images
    match /promotions/{promoId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if isAdmin() && isValidImage();
    }

    // Default deny all
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
